@page "/blueberry"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
<RemoteAuthenticatorView Action="@Action" />

@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager


<PageTitle>Main</PageTitle>

<div class="searchModule">

    <div class="searchComponent">
        <input class="searchbar" type="text" placeholder="Search" @onkeydown="enterSearch" value=@searchInput />
        <button class="searchbutton" type="button" @onclick="search">
            <span>
                <i class="fa-solid fa-magnifying-glass searchIcon"></i>
            </span>
        </button>
    </div>
    <div class="filters">
        <div class="btn-group">
            <button class="btn btn-secondary btn-sm dropdown-toggle filterButton" type="button"
                data-bs-toggle="dropdown" aria-expanded="false">
                Sort by
            </button>
            <ul class="dropdown-menu">
                <li>
                    @foreach (var sortBy in sortByValues)
                     {
                         <span class=@($"dropdown-item {(sortBy.Item2 ? "active" : " ")} ") @onclick="() => updateSortBy(sortBy.Item1)">@sortBy.Item1</span>
                     }
                </li>
                <!--<li><button class="dropdown-item active" href="#" aria-current="true">Most relevent</button></li>
                <li><button class="dropdown-item" type="button">Newest</button></li>
                <li><button class="dropdown-item" type="button">Oldest</button></li> -->
            </ul>
        </div>


        <div class="btn-group">
            <button class="btn btn-secondary dropdown-toggle filterButton" type="button"
                id="dropdownMenuClickableInside" data-bs-toggle="dropdown" data-bs-auto-close="outside"
                aria-expanded="false">
                <!--<button class="btn btn-secondary btn-sm dropdown-toggle filterButton" type="button" data-bs-toggle="dropdown" aria-expanded="false" > -->
                Tags
                <span class="badge bg-primary rounded-pill">@(tags.Where(t => t.Item2).Count())</span> <!-- number of tags chosen -->
            </button>
            <ul class="dropdown-menu">
                <li>
                    <input class="searchbarForTags" type="text" value=@inputValue placeholder="Search for tags"  @oninput=@onTagSearch />
                </li>
                <li>
                     @foreach (var tag in filteredTags)
                     {
                         <span class=@($"badge {(tag.Item2 ? "bg-primary" : "bg-secondary")} rounded-pill tag") @onclick="() => onTagToggle(tag.Item1)">@tag.Item1</span>
                     }
                </li>
                <li class="clearAll"><label type="label" @onclick="clearAll" > clear all</label></li>
            </ul>
        </div>

        <div class="btn-group">
            <button class="btn btn-secondary dropdown-toggle filterButton" type="button"
                id="dropdownMenuClickableInside" data-bs-toggle="dropdown" data-bs-auto-close="outside"
                aria-expanded="false">
                <!--<button class="btn btn-secondary btn-sm dropdown-toggle filterButton" type="button" data-bs-toggle="dropdown" aria-expanded="false"> -->
                Year
            </button>
            <ul class="dropdown-menu">
                <li>
                    <div class="yearLabels">
                            <b>From :</b> @period.Item1
                            <b>To :</b> @period.Item2
                            
                    </div>
                </li>
                <li>
                    <div class="slider">
                        <RadzenSlider Range="true" @bind-Value=@yearValues Min="1970" Max="2021" TValue="IEnumerable<int>"
                            Change=@OnChange />
                    </div>
                </li>
            </ul>
        </div>
    </div>
</div>

@code {
    IEnumerable<(string, bool)> tags = new (string,bool)[] {("React", true),("Bootstrap", false),("Blazor", false),("Flutter",false)};
    IEnumerable<(string, bool)> filteredTags = new (string,bool)[] {("React", true),("Bootstrap", false),("Blazor", false),("Flutter",false)}; 

    IEnumerable<(string, bool)> sortByValues = new (string, bool)[] {("Most relevent", true),("Newest", false), ("Oldest", false)}; 
    [Parameter] public string? Action { get; set; }
    (int, int) period = (1970, 2021);
    [Parameter] public string inputValue {get; set;}
    IEnumerable<int> yearValues = new int[] { 1970, 2021 };
    public string? searchInput {get; set; }
    void OnChange(IEnumerable<int> yearValues)
    {
        var lowerBound = yearValues.ElementAtOrDefault(0);
        var upperBound = yearValues.ElementAtOrDefault(1);

        period = (lowerBound, upperBound);
    }

    void onTagSearch(ChangeEventArgs args) {
        filteredTags = tags.Where(t => t.Item1.ToLower().Contains((String)args.Value) || t.Item2);
    }

    void onTagToggle(string tagName) {
        tags = tags.Select(t => t.Item1 == tagName ? (t.Item1, !t.Item2) : t);
        if (inputValue==null) inputValue = "";
        filteredTags = tags.Where(t => t.Item1.ToLower().Contains((String)inputValue) || t.Item2);
    }
    void clearAll(){
        tags = tags.Select(t => (t.Item1, false));
        if (inputValue==null) inputValue = "";
        filteredTags = tags.Where(t => t.Item1.ToLower().Contains((String)inputValue) || t.Item2);
    }

    void search(){
        Console.WriteLine(searchInput);
         Navigation.NavigateTo("blueberry/materials");
    }

    void enterSearch(KeyboardEventArgs e){
        if(e.Key == "Enter"){
            search();
        }
    }

    void updateSortBy(string sortByValue){
        sortByValues = sortByValues.Select( sb => (sb.Item1, false));
        sortByValues = sortByValues.Select( sb => sb.Item1 == sortByValue ? (sb.Item1, true) : sb);
        
        //if (inputValue==null) inputValue = "";
        //filteredTags = tags.Where(t => t.Item1.ToLower().Contains((String)inputValue) || t.Item2);

    }
}
