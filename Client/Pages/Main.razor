@page "/blueberry"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
<RemoteAuthenticatorView Action="@Action" />
@using Microsoft.AspNetCore.Components.Authorization
@using System.Collections


@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager

<AuthorizeView>
    <Authorized>
        Hello, @context.User.Identity?.Name!
        <button class="nav-link btn btn-link" @onclick="BeginLogout">Log out</button>
    </Authorized>
    <NotAuthorized>
        <a href="authentication/login">Log in</a>
    </NotAuthorized>
</AuthorizeView>



<PageTitle>Index</PageTitle>
<div class="searchModule">
    <div class="searchComponent">
        <input class="searchbar" type="text" placeholder="Search" />
        <button class="searchbutton" type="button">
            <span>
                <i class="fa-solid fa-magnifying-glass searchIcon"></i>
            </span>
        </button>
    </div>
    <div class="filters">
        <div class="btn-group">
            <button class="btn btn-secondary btn-sm dropdown-toggle filterButton" type="button"
                data-bs-toggle="dropdown" aria-expanded="false">
                Sort by
            </button>
            <ul class="dropdown-menu">
                <li><button class="dropdown-item" type="button">Most relevent</button></li>
                <li><button class="dropdown-item" type="button">Newest</button></li>
                <li><button class="dropdown-item" type="button">Oldest</button></li>
            </ul>
        </div>


        <div class="btn-group">
            <button class="btn btn-secondary dropdown-toggle filterButton" type="button"
                id="dropdownMenuClickableInside" data-bs-toggle="dropdown" data-bs-auto-close="outside"
                aria-expanded="false">
                <!--<button class="btn btn-secondary btn-sm dropdown-toggle filterButton" type="button" data-bs-toggle="dropdown" aria-expanded="false" > -->
                Tags
                <span class="badge bg-primary rounded-pill">3</span> <!-- number of tags chosen -->
            </button>
            <ul class="dropdown-menu">
                <li>
                    <input class="searchbarForTags" type="text" placeholder="Search for tags" />
                </li>
                <li>
                    <span class="badge bg-primary rounded-pill tag">Blazor</span> <!-- auto generate tags-->
                    <span class="badge bg-primary rounded-pill tag">React</span> <!-- auto generate tags-->
                    <span class="badge bg-primary rounded-pill tag">Flutter</span> <!-- auto generate tags-->
                </li>
                <li class="clearAll"><label type="label"> clear all</label></li>
            </ul>
        </div>

        <div class="btn-group">
            <button class="btn btn-secondary dropdown-toggle filterButton" type="button"
                id="dropdownMenuClickableInside" data-bs-toggle="dropdown" data-bs-auto-close="outside"
                aria-expanded="false">
                <!--<button class="btn btn-secondary btn-sm dropdown-toggle filterButton" type="button" data-bs-toggle="dropdown" aria-expanded="false"> -->
                Year
            </button>
            <ul class="dropdown-menu">
                <li>
                    <div class="yearLabels">
                            <b>From :</b> @period.Item1
                            <b>To :</b> @period.Item2
                            
                    </div>
                </li>
                <li>
                    <div class="slider">
                        <RadzenSlider Range="true" @bind-Value=@values Min="1970" Max="2021" TValue="IEnumerable<int>"
                            Change=@OnChange />
                    </div>
                </li>
            </ul>
        </div>
    </div>
</div>

@code {
    [Parameter] public string? Action { get; set; }
    (int, int) period = (1970, 2021);

    private async Task BeginLogout(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }
    IEnumerable<int> values = new int[] { 1970, 2021 };
    void OnChange(IEnumerable<int> values)
    {
        var lowerBound = values.ElementAtOrDefault(0);
        var upperBound = values.ElementAtOrDefault(1);

        period = (lowerBound, upperBound);

        //Console.WriteLine($"lower: {lowerBound}, upper: {upperBound}");
    }
}