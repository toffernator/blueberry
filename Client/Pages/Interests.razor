@page "/interests"
@attribute [Authorize]
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http

<PageTitle>Interests</PageTitle>

<div class="pageContent">
    <div class="chosentags">
        <div class="tagTitle">
            <h3> Chosen tags</h3>
        </div>
        <div class="tags">
            @foreach (var tag in chosenTags)
                     {
                         <span class="badge rounded-pill bg-primary tag" @onclick="() => removeFromChosenTags(tag)" >@tag</span> 
                     }
        </div>
    </div>
    <div class="searchForTags">
        <div class="searchComponent">
            <input class="searchbar" type="text" placeholder="Search" />
            <button class="searchbutton" type="button">
                <span>
                    <i class="fa-solid fa-magnifying-glass searchIcon"></i>
                </span>
            </button>
        </div>
        <div class="tags">
             @foreach (var tag in tags)
                     {
                         <span class="badge rounded-pill bg-secondary tag" @onclick="() => addToChosenTags(tag.Item1)" >@tag.Item1</span> 
                     }
        </div>
        <nav aria-label="Page navigation example tagNav">
            <ul class="pagination justify-content-center">
                <li class="page-item disabled">
                    <a class="page-link">Previous</a>
                </li>
                <li class="page-item"><a class="page-link" href="#">1</a></li>
                <li class="page-item"><a class="page-link" href="#">2</a></li>
                <li class="page-item"><a class="page-link" href="#">3</a></li>
                <li class="page-item">
                    <a class="page-link" href="#">Next</a>
                </li>
            </ul>
        </nav>

    </div>
</div>
<div class="d-grid gap-2 col-6 mx-auto">
    <button class="btn btn-primary" type="button" @onclick="Done">Done</button>
</div>


@code {

   IEnumerable<(string, bool)> tags = new (string,bool)[0];
   PrimitiveCollection<string> chosenTags = new PrimitiveCollection<string>(); 

    async Task Done()
    {
        // Empty userid returns 0
        var userid = await localStorage.GetItemAsync<int>("userid");
        if (userid != 0)
        {
            var user = new UserUpdateDto(userid, chosenTags);

            var response = await Http.PutAsJsonAsync($"user/{userid}", user);

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("");
            } else
            {
                await CreateUser();
            }

        } else
        {
            await CreateUser();
        }
    }


    async Task CreateUser()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = new UserCreateDto(authState.User.Identity.Name, chosenTags);

        var response = await Http.PostAsJsonAsync($"user", user);

        if (response.IsSuccessStatusCode)
        {
            var created = await response.Content.ReadFromJsonAsync<UserDto>();
            await localStorage.RemoveItemAsync("userid");
            await localStorage.SetItemAsync("userid", created?.Id);

            Navigation.NavigateTo("");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var tagDtos = await Http.GetFromJsonAsync<TagDto[]>($"api/tag");
        tags = tagDtos.Select(t => (t.Name, false));

        var userid = await localStorage.GetItemAsync<int>("userid");
        if (userid != 0)
        {
            var user =  await Http.GetFromJsonAsync<UserDto>($"user/{userid}");
            if (user != null) chosenTags = user.Tags;
        }
    }

    void addToChosenTags(string tagName){
        chosenTags.Add(tagName);
    }

    void removeFromChosenTags(string tagName){
        chosenTags.Remove(tagName);
    }

}
