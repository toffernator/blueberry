@page "/interests"
@attribute [Authorize]
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject NavigationManager uriHelper;

<PageTitle>Interests</PageTitle>
<div class="pageContent">
    <div class="chosentags">
        <div class="tagTitle">
            <h3> Chosen tags</h3>
        </div>
        <div class="tags">
            @foreach (var tag in chosenTags)
                     {
                         <span class="badge rounded-pill bg-primary tag" @onclick="() => onTagToggle(tag)" >@tag</span> 
                     }
        </div>
    </div>
    <div class="searchForTags">
        @if(isShown == false){
            <div class="text-center">
                <div class="spinner-border" role="status">
                     <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            }
        <div class="tags">
             @foreach (var tag in displayedTags)
                     {
                         <span class="badge rounded-pill bg-secondary tag" @onclick="() => onTagToggle(tag)" >@tag</span> 
                     }    
        </div>
        <div class="d-grid gap-2 col-6 mx-auto">
    @if(isDone == false){
        <button class="btn btn-primary done" type="button" @onclick="Done">Done</button>
    }
    else {
        <button class="btn btn-primary done" type="button" disabled>
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                Loading...
            </button>
        }
    </div>
</div>
</div>



@code {

   IEnumerable<(string, bool)> tags = new (string,bool)[0];
   PrimitiveCollection<string> chosenTags = new PrimitiveCollection<string>(); 

   List<string> displayedTags = new List<string>();    
   
    public Boolean isDone = false;
    public Boolean isShown = false;

    async Task Done()
    {
        isDone = true;
        // Empty userid returns 0
        var userid = await localStorage.GetItemAsync<int>("userid");
        if (userid != 0)
        {
            var user = new UserUpdateDto(userid, chosenTags);

            var response = await Http.PutAsJsonAsync($"api/user/{userid}", user);

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("");
            } else
            {
                await CreateUser();
            }

        } else
        {
            await CreateUser();
        }

    }


    async Task CreateUser()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity == null)
        {
            Navigation.NavigateTo("");
        }
        var user = new UserCreateDto(authState.User.Identity.Name, chosenTags);

        var response = await Http.PostAsJsonAsync($"api/user", user);

        if (response.IsSuccessStatusCode)
        {
            var created = await response.Content.ReadFromJsonAsync<UserDto>();
            await localStorage.RemoveItemAsync("userid");
            await localStorage.SetItemAsync("userid", created?.Id);

            Navigation.NavigateTo("");
        }
    }

    protected override async Task OnInitializedAsync()
    {   
        var tagDtos = await Http.GetFromJsonAsync<TagDto[]>($"api/tag");
        tags = tagDtos.Select(t => (t.Name, false));

        var userid = await localStorage.GetItemAsync<int>("userid");
        if (userid != 0)
        {
            var response =  await Http.GetAsync($"api/user/{userid}");
            if (response.IsSuccessStatusCode)
            {
                var user = await response.Content.ReadFromJsonAsync<UserDto>();
                chosenTags = user.Tags;
            }
        }

        displayedTags = tags.Select(t => t.Item1).ToList() ;
        foreach(var tag in chosenTags){
            displayedTags.Remove(tag);
        }
        isShown = true;
    }

    void addToChosenTags(string tagName){
        chosenTags.Add(tagName);
        displayedTags.Remove(tagName);

    }

    void removeFromChosenTags(string tagName){
        chosenTags.Remove(tagName);
        displayedTags.Add(tagName);
    }

    void onTagToggle(string tagName) {
        if(displayedTags.Contains(tagName)){
            addToChosenTags(tagName);
        }
        else{removeFromChosenTags(tagName);}
        }

    void onTagSearch(ChangeEventArgs args) {
        string input = (String)args.Value;
        displayedTags = tags.Where(t => t.Item1.ToLower().Contains(input.ToLower())).Select(t => t.Item1).ToList();
        foreach(var tag in chosenTags){
            displayedTags.Remove(tag);
        }
    }
}
