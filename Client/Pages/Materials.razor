@page "/material"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@inject HttpClient Http

<!-- PICTURE SOURCE: https://www.pexels.com/photo/black-screen-with-code-4164418/ -->

<PageTitle>Materials</PageTitle>


<div class="pageContent">
    <div class="logoComponent">
        <div class="logo">
            <button class="logobutton" @onclick="GoToMain">
                <img src="/Assets/img/logo.svg" class="logoImage" alt="">
            </button>
        </div>
    </div>

    <div class="materials">
        <div class="searchComponent">
            <SearchComponent searchInput=@_searchKey yearValues=@(new int[] {@_startyear, @_endyear}) chosenTags=@(_tags?.Split(',') ?? new string[0]) chosenSortBy=@_sortBy type=@_type SearchMethod=@UpdateResults />
       </div>
        @foreach (var material in materials)
        {
        <div class="card mb-3 material" style="max-width: 540px;">
            <div class="row g-0">
                <div class="col-md-4">
                    <img src=@material.ImageUrl class="img-fluid rounded-start img-fill">
                </div>
                <div class="col-md-8">
                    <div class="card-header bg-transparent">@material.Type</div>
                    <div class="card-body">
                        <h5 class="card-title">@material.Title</h5>
                        <p class="card-text">@material.ShortDescription</p>
                        <p class="card-text"><small class="text-muted">published @material.Date.ToString("dd/MM/yyyy")</small></p>
                    </div>
                    <div class="card-footer bg-transparent border-0">
                        @foreach (var tag in material.Tags)
                        {
                            <span class=@($"badge bg-primary rounded-pill tag")>@tag</span>
                        }
                    </div>
                </div>
            </div>
        </div>
        }

    </div>
</div>
@code {
IEnumerable<MaterialDetailsDto> materials = new MaterialDetailsDto[0];

    private string _searchKey = "";
    private string? _tags;
    private int _startyear;
    private int _endyear;
    private Sortings _sortBy = Sortings.NEWEST;
    private string _type = "All";

    private int _offset = 0;
    private int _limit = 100;

    void GetURLChanges(){
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var queryStrings = QueryHelpers.ParseQuery(uri.Query);
        if(queryStrings.TryGetValue("tags", out var tagsURL))
        {
            _tags = tagsURL;
        }
        if(queryStrings.TryGetValue("startyear", out var startyear))
        {
            _startyear = int.Parse(startyear);
        }
        if(queryStrings.TryGetValue("endyear", out var endyear))
        {
            _endyear = int.Parse(endyear);
        }
        if(queryStrings.TryGetValue("searchKey", out var searchKeyURL))
        {
            _searchKey = searchKeyURL;
        }
        if(queryStrings.TryGetValue("sortby", out var sortbyURL))
        {
            Enum.TryParse(sortbyURL, out Sortings sortBy);
            _sortBy = sortBy;
        }
        if(queryStrings.TryGetValue("type", out var typeURL))
        {
            _type = typeURL;
        }
    }

    async Task UpdateResults(SearchOptions options)
    {
        string searchKey = options.SearchString; 
        string tags = string.Join(",",options.Tags ?? new PrimitiveSet<string>(){});
        int startyear = options.StartDate.Value.Year;
        int endyear = options.EndDate.Value.Year;
        
        //TODO: CHANGE THIS WHEN SORTBY IS ADDED TO SEARCHOPTIONS!
        Sortings? sortBy = options.SortBy;
        string? type = options.Type;
        
        //Update SearchComponent 
        _searchKey = searchKey;
        _tags = tags;
        _startyear = startyear;
        _endyear = endyear;
        _sortBy = sortBy ?? _sortBy;
        _type = type ?? _type;
        
        
        var URL = $"material?searchKey={_searchKey}&tags={_tags}&startyear={_startyear}&endyear={_endyear}&sortby={_sortBy}&type={_type}";
        Navigation.NavigateTo(URL);
        materials = await fetchMaterials();
        //Force Re-render
        await InvokeAsync(() => {StateHasChanged();});
    }

    protected override async Task OnInitializedAsync()
    {
        GetURLChanges();
        materials = await fetchMaterials();
    }

    private async Task<MaterialDetailsDto[]> fetchMaterials() 
    {
        return await Http.GetFromJsonAsync<MaterialDetailsDto[]>($"api/material?searchString={Uri.EscapeDataString(_searchKey)}&tag={Uri.EscapeDataString(_tags ?? "")}&startyear={_startyear}&endyear={_endyear}&offset={_offset}&limit={_limit}&sortby={_sortBy}") ?? new MaterialDetailsDto[0];
    }

    void GoToMain(){
         Navigation.NavigateTo("");
    }
}
