@page "/material"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@implements IDisposable

<!-- PICTURE SOURCE: https://www.pexels.com/photo/black-screen-with-code-4164418/ -->

<PageTitle>Materials</PageTitle>


<div class="pageContent">
    <div class="logoComponent">
        <div class="logo">
        <button class="logobutton" @onclick="goToMain">
            <img src="/Assets/img/logo.svg" class="logoImage" alt="">
        </button>
    </div>
    </div>

    <div class="materials">
        <div class="searchComponent">
            <SearchComponent searchInput=@_searchKeyURL yearValues=@(new int[] {@_startyearURL, @_endyearURL}) chosenTags=@(_tagsURL.Split(',')) chosenSortBy=@_chosenSortBy />
       </div>
        @foreach (var material in materials)
        {
        <div class="card mb-3 material" style="max-width: 540px;">
            <div class="row g-0">
                <div class="col-md-4">
                    <img src=@material.ImageUrl class="img-fluid rounded-start img-fill">
                </div>
                <div class="col-md-8">
                    <div class="card-header bg-transparent">@material.Type</div>
                    <div class="card-body">
                        <h5 class="card-title">@material.Title</h5>
                        <p class="card-text">@material.ShortDescription</p>
                        <p class="card-text"><small class="text-muted">published @material.Date.ToString("dd/MM/yyyy")</small></p>
                    </div>
                    <div class="card-footer bg-transparent border-0">
                        @foreach (var tag in material.Tags)
                        {
                            <span class=@($"badge bg-primary rounded-pill tag")>@tag</span>
                        }
                    </div>
                </div>
            </div>
        </div>
        }

    </div>
</div>
@code {
IEnumerable<MaterialDetailsDto> materials = new MaterialDetailsDto[] {
    new MaterialDetailsDto( 0, "Introduction to React", new PrimitiveCollection<string> { "React", "Framework" }, "React is a framework widely used in the industry.", "/Assets/img/react.jpg", "Article", new DateTime(2020, 4, 11) ),
    new MaterialDetailsDto( 1, "Introduction to Blazor", new PrimitiveCollection<string> { "Blazor", "Framework" }, "Blazor is a new framework ready to take on react as the leading frontend framework.", "/Assets/img/react.jpg", "Article", new DateTime(2021, 2, 8) ),
    new MaterialDetailsDto( 2, "Introduction to Bootstrap", new PrimitiveCollection<string> { "Bootstrap", "Framework" }, "Bootstrap is a CSS framework widely used in the industry.", "/Assets/img/react.jpg", "Video", new DateTime(2018, 11, 23) ),
    new MaterialDetailsDto( 3, "Using Blazor with Bootstrap", new PrimitiveCollection<string> { "Bootstrap", "Framework", "Blazor" }, "Blazor and Bootstrap is a force to be reckoned with!", "/Assets/img/react.jpg", "Video", new DateTime(2021, 8, 29)),
    new MaterialDetailsDto( 4, "Using React with Bootstrap", new PrimitiveCollection<string> { "React", "Bootstrap", "Framework" }, "React and Bootstrap is a classic combination widely used in the industry", "/Assets/img/react.jpg", "Article", new DateTime(2019, 9, 4)),
    };

    private string _searchKeyURL;
    private string _tagsURL;
    private int _startyearURL;
    private int _endyearURL;
    private string _chosenSortBy;

    void updateURLChanges(){
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var queryStrings = QueryHelpers.ParseQuery(uri.Query);
        if(queryStrings.TryGetValue("tags", out var tagsURL))
        {
            _tagsURL = tagsURL;
        }
        if(queryStrings.TryGetValue("startyear", out var startyear))
        {
            _startyearURL = int.Parse(startyear);
        }
        if(queryStrings.TryGetValue("endyear", out var endyear))
        {
            _endyearURL = int.Parse(endyear);
        }
        if(queryStrings.TryGetValue("searchKey", out var searchKeyURL))
        {
            _searchKeyURL = searchKeyURL;
        }
        if(queryStrings.TryGetValue("sortedby", out var sortbyURL))
        {
            _chosenSortBy = sortbyURL;
        }
    }
    protected override void OnInitialized()
    {
        // Subscribe
        Navigation.LocationChanged += LocationChanged;
        base.OnInitialized();

        updateURLChanges();
    }

    void goToMain(){
         Navigation.NavigateTo("");
    }

    void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        updateURLChanges();
        
    }
    void IDisposable.Dispose()
    {
        // Unsubscribe when component is disposed
        Navigation.LocationChanged -= LocationChanged;
    }

}
