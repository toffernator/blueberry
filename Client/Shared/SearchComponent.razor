@inject NavigationManager Navigation
@inject HttpClient Http

<div class="searchModule">
    <div class="searchComponent">
        <input class="searchbar" type="text" placeholder= "search" @bind=@searchInput @oninput="OnInputEvent"  @onkeydown="enterSearch"/>
        <button class="searchbutton" type="button" @onclick="search">
            <span>
                <i class="fa-solid fa-magnifying-glass searchIcon"></i>
            </span>
        </button>
    </div>
    <div class="filters">
        <div class="btn-group">
            <button class="btn btn-secondary btn-sm dropdown-toggle filterButton" type="button"
                data-bs-toggle="dropdown" aria-expanded="false">
                Sort by
            </button>
            <ul class="dropdown-menu">
                <li>
                    @foreach (var sortBy in sortByValues)
                     {
                         <span class=@($"dropdown-item {(sortBy.Item2 ? "active" : " ")} ") @onclick="() => updateSortBy(sortBy.Item1)">@sortBy.Item1</span>
                     }
                </li>
            </ul>
        </div>
        <div class="btn-group">
            <button class="btn btn-secondary dropdown-toggle filterButton" type="button"
                id="dropdownMenuClickableInside" data-bs-toggle="dropdown" data-bs-auto-close="outside"
                aria-expanded="false">
                Tags
                <span class="badge bg-primary rounded-pill">@(tags.Where(t => t.Item2).Count())</span> <!-- number of tags chosen -->
            </button>
            <ul class="dropdown-menu tagdropdown">
                <li>
                    <input class="searchbarForTags" type="text" @bind=@inputForTagSearch placeholder="Search for tags"  @oninput=@onTagSearch />
                </li>
                @if(isShowingAll){
                <li class= "tagsShowingAll">
                     @foreach (var tag in filteredTags)
                     {
                         <span class=@($"badge {(tag.Item2 ? "bg-primary" : "bg-secondary")} rounded-pill tag") @onclick="() => onTagToggle(tag.Item1)">@tag.Item1</span>
                     }
                </li>
                }else{
                <li class= "tags">
                    @if(!tags.Where(t => t.Item2).Any()){
                        <p> you have no chosen tags</p>
                    }
                    @foreach (var tag in tags.Where(t => t.Item2))
                    {
                        <span class= "badge bg-primary rounded-pill tag" @onclick="() => onTagToggle(tag.Item1)">@tag.Item1</span>
                    }
                 </li>
                }
            
                <li class="clearAll">
                    <button type="button" class="btn btn-outline-primary" @onclick="showAll"> @showAllText</button>
                    <label type="button" class="btn btn-outline-secondary" @onclick="clearAll">clear all</label>
                    </li>
            </ul>
        </div>

        <div class="btn-group">
            <button class="btn btn-secondary dropdown-toggle filterButton" type="button"
                id="dropdownMenuClickableInside" data-bs-toggle="dropdown" data-bs-auto-close="outside"
                aria-expanded="false">
                Year
            </button>
            <ul class="dropdown-menu">
                <li>
                    <div class="yearLabels">
                            <b>From :</b>@yearValues.First() 
                            <b>To :</b> @yearValues.Last()
                    </div>
                </li>
                <li>
                    <div class="slider">
                        <RadzenSlider style="background-color: black;" Min="2000" Max="2021" Range="true" @bind-Value=@yearValues TValue="IEnumerable<int>" />
                    </div>
                </li>
            </ul>
        </div>
        <div class="filters">
        <div class="btn-group">
            <button class="btn btn-secondary btn-sm dropdown-toggle filterButton" type="button"
                data-bs-toggle="dropdown" aria-expanded="false">
                Type
            </button>
            <ul class="dropdown-menu">
                <li>
                    @foreach (var type in materialTypes)
                     {
                         <span class=@($"dropdown-item {(type.Item2 ? "active" : " ")} ") @onclick="() => updateType(type.Item1)">@type.Item1</span>
                     }
                </li>
            </ul>
        </div>
    </div>
</div>
</div>


@code{

    //Lists
    IEnumerable<(string, bool)> tags = new (string,bool)[0];
    IEnumerable<(string, bool)> filteredTags = new (string,bool)[0]; 
    IEnumerable<(string, bool)> sortByValues = new (string, bool)[] {("Most relevant", false),("A-Z", false),("Z-A",false),("Newest", false), ("Oldest", false)};
    IEnumerable<(string, bool)> materialTypes = new (string, bool)[] {("All", false),("Article", false),("Podcast", false),("Video",false)};  
    string inputForTagSearch = "";

    //Parameters
    [Parameter]
    public EventCallback<SearchOptions> SearchMethod {get; set;}

    [Parameter]    
    public string searchInput {get; set; } = "";
    [Parameter]    
    public IEnumerable<string> chosenTags {get; set; } = new string[0];
    [Parameter]    
    public IEnumerable<int> yearValues {get; set;} = new int[]{2000, 2021};
    [Parameter]    
    public string chosenSortBy {get; set;} = "Most relevant";

    [Parameter]
    public string type {get; set;} = "All";

    public String showAllText = "show all";
    public Boolean isShowingAll = false;


    void onTagSearch(ChangeEventArgs args) {
        if (args.Value != null)
        {
            string input = (string)args.Value;
            filteredTags = tags.Where(t => t.Item1.ToLower().Contains(input.ToLower()) || t.Item2);
        }
    }

    void onTagToggle(string tagName) {
        tags = tags.Select(t => t.Item1 == tagName ? (t.Item1, !t.Item2) : t);
        if (inputForTagSearch==null) inputForTagSearch = "";
        filteredTags = tags.Where(t => t.Item1.ToLower().Contains((String)inputForTagSearch) || t.Item2);
    }
     void showAll(){
         if(isShowingAll == false){
             isShowingAll = true;
             showAllText = "show chosen";
         }
         else {
             isShowingAll = false;
             showAllText = "show all";
         }
     }
    void clearAll(){
        tags = tags.Select(t => (t.Item1, false));
        if (inputForTagSearch==null) inputForTagSearch = "";
        filteredTags = tags.Where(t => t.Item1.ToLower().Contains((String)inputForTagSearch) || t.Item2);
    }

    private void OnInputEvent(ChangeEventArgs changeEvent)
    {
        if (changeEvent.Value != null)
        {
            searchInput = (string)changeEvent.Value;
        }
    }

    void search(){
        var searchKey = (searchInput != null ? searchInput.Replace(" ", "+") : "");
        var tagsChosen = new PrimitiveSet<string>(tags.Where(t => t.Item2).Select(t => $"{t.Item1}"));
        var startDate = new DateTime(yearValues.First(),1,1);
        var endDate = new DateTime(yearValues.Last(),12,31);
        //TODO: CHANGE THIS WHEN SORTBY IS ADDED TO SEARCHOPTIONS!
        //var sortByChosen = string.Join("_", sortByValues.Where(sb => sb.Item2).Select(sb =>  $"{sb.Item1}"));
        var type = materialTypes.Where(t => t.Item2).Select(t => t.Item1).FirstOrDefault(); 
        SearchMethod.InvokeAsync(new SearchOptions(){SearchString = searchKey, Tags= tagsChosen, StartDate = startDate, EndDate = endDate, Type=type});
    }

    void enterSearch(KeyboardEventArgs e){
        if(e.Key == "Enter"){
            search();
        }
    }

    void updateSortBy(string sortByValue){
        sortByValues = sortByValues.Select( sb => sb.Item1 == sortByValue ? (sb.Item1, true) : (sb.Item1, false));
    }

    void updateType(string type){
        materialTypes = materialTypes.Select( t => t.Item1 == type ? (t.Item1, true) : (t.Item1, false));
    }

    protected override async Task OnInitializedAsync()
    {
        var tagDtos = await Http.GetFromJsonAsync<TagDto[]>($"api/tag") ?? new TagDto[0];
        tags = tagDtos.Select(t => chosenTags.Contains(t.Name) ? (t.Name, true) : (t.Name, false));
        sortByValues = sortByValues.Select( sb => sb.Item1 == chosenSortBy ? (sb.Item1, true) : (sb.Item1, false));
        materialTypes = materialTypes.Select( t => t.Item1 == type ? (t.Item1, true) : (t.Item1, false));
        filteredTags = tags;
        
    }
}
